// http://eslint.org/docs/configuring/
{
    "env": {
        "browser": true
    },
    
    "globals": {
        "console": false,
        "alert": false,
        "angular": false,
        "$compileProvider": false,
        "$httpProvider": false,
        "_": false,
        "jsf": false
    },

    "ecmaFeatures": {
        // enable arrow functions
        "arrowFunctions": true,
        // enable let and const (aka block bindings)
        "blockBindings": true,
        // enable classes
        "classes": true,
        // enable default function parameters
        "defaultParams": true,
        // enable destructuring
        "destructuring": true,
        // enable for-of loops
        "forOf": true,
        // enable modules and global strict mode
        //"modules": true,
        // enable computed object literal property names:   https://leanpub.com/understandinges6/read#leanpub-auto-computed-property-names
        "objectLiteralComputedProperties": true,
        // enable object literal shorthand methods:   https://leanpub.com/understandinges6/read#leanpub-auto-method-initializer-shorthand
        "objectLiteralShorthandMethods": true,
        // enable object literal shorthand properties:   
        "objectLiteralShorthandProperties": true,
        // enable super references inside of functions
        "superInFunctions": true,
        // enable template strings
        "templateStrings": true
    },

    // http://eslint.org/docs/rules
    // 0 - turn the rule off
    // 1 - turn the rule on as a warning (doesn't affect exit code)
    // 2 - turn the rule on as an error (exit code is 1 when triggered)

    "rules": {
        // Possible Errors
        
        // disallow trailing commas in object literals
        "comma-dangle": "never",
        // disallow assignment in conditional expressions
        "no-cond-assign": 2,
        // disallow use of console (off by default in the node environment)
        // Aufrufe mit console.log entfernen:   uglifyjs --compress --define DEBUG=false
        "no-console": 0,
        // disallow use of constant expressions in conditions
        "no-constant-condition": 2,
        // disallow control characters in regular expressions
        "no-control-regex": 2,
        // disallow use of debugger
        "no-debugger": 2,
        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,
        // disallow empty statements
        "no-empty": 2,
        // disallow the use of empty character classes in regular expressions
        "no-empty-class": 2,
        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,
        // disallow double-negation boolean casts in a boolean context
        "no-extra-boolean-cast": 2,
        // disallow unnecessary semicolons
        "no-extra-semi": 2,
        // disallow overwriting functions written as function declarations
        "no-func-assign": 2,
        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": 2,
        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,
        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,
        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 2,
        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 2,
        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 2,
        // disallow sparse arrays
        "no-sparse-arrays": 2,
        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,
        // disallow comparisons with the value NaN
        "use-isnan": 2,
        // Ensure JSDoc comments are valid (off by default)
        "valid-jsdoc": [2, {"prefer": {"return": "returns"}}],
        // Ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,
        
        // Best Practices
        
        // treat var statements as if they were block scoped (off by default)
        "block-scoped-var": 2,
        // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "complexity": [2, 5],
        // require return statements to either always or never specify values
        "consistent-return": 2,
        // specify curly brace conventions for all control statements
        "curly": 2,
        // require default case in switch statements (off by default)
        "default-case": 2,
        // encourages use of dot notation whenever possible
        "dot-notation": 2,
        //  require the use of === and !==
        "eqeqeq": 2,
        // make sure for-in loops have an if statement (off by default)
        "guard-for-in": 2,
        // disallow the use of alert, confirm, and prompt
        "no-alert": 2,
        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,
        // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-div-regex": 2,
        // disallow else after a return in an if (off by default)
        "no-else-return": 2,
        // disallow use of labels for anything other then loops and switches
        "no-empty-label": 2,
        // disallow use of eval()
        "no-eval": 2,
        // disallow adding to native types
        "no-extend-native": 2,
        // disallow unnecessary function binding
        "no-extra-bind": 2,
        // disallow fallthrough of case statements
        "no-fallthrough": 2,
        // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-floating-decimal": 2,
        // disallow use of eval()-like methods
        "no-implied-eval": 2,
        // disallow usage of __iterator__ property
        "no-iterator": 2,
        // disallow use of labeled statements
        "no-labels": 2,
        // disallow unnecessary nested blocks
        "no-lone-blocks": 2,
        // disallow creation of functions within loops
        "no-loop-func": 2,
        // disallow use of multiple spaces
        "no-multi-spaces": 2,
        // disallow use of multiline strings
        "no-multi-str": 2,
        // disallow reassignments of native objects
        "no-native-reassign": 2,
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": 2,
        // disallow use of new operator for Function object
        "no-new-func": 2,
        // disallows creating new instances of String,Number, and Boolean
        "no-new-wrappers": 2,
        // disallow use of octal literals
        "no-octal": 2,
        // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal-escape": 2,
        // disallow use of process.env (off by default)
        "no-process-env": 2,
        // disallow usage of __proto__ property
        "no-proto": 2,
        // disallow declaring the same variable more then once
        "no-redeclare": 2,
        // disallow use of assignment in return statement
        "no-return-assign": 2,
        // disallow use of javascript: urls.
        "no-script-url": 2,
        // disallow comparisons where both sides are exactly the same (off by default)
        "no-self-compare": 2,
        // disallow use of comma operator
        "no-sequences": 2,
        // disallow usage of expressions in statement position
        "no-unused-expressions": 2,
        // disallow use of void operator (off by default)
        "no-void": 2,
        // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME (off by default)
        "no-warning-comments": 1,
        // disallow use of the with statement
        "no-with": 2,
        
        // Strict Mode
        
        // disallow unnecessary use of "use strict"; when already in strict mode
        "no-extra-strict": 2,
        // require that all functions are run in strict mode
        "strict": 0,

        // Variables
        
        // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-catch-shadow": 2,
        // disallow deletion of variables
        "no-delete-var": 2,
        // disallow labels that share a name with a variable
        "no-label-var": 2,
        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,
        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,
        // disallow use of undefined when initializing variables
        "no-undef-init": 2,
        // disallow use of undefined variable (off by default)
        "no-undefined": 2,
        // disallow declaration of variables that are not used in the code
        "no-unused-vars": 2,
        // disallow use of variables before they are defined
        "no-use-before-define": 0,

        // Stylistic Issues
        
        // enforce one true brace style (off by default)
        "brace-style": [2, "1tbs"],
        // require camel case names
        "camelcase": 2,
        // enforce one true comma style (off by default)
        "comma-style": [2, "last"],
        // enforce newline at the end of file, with no multiple empty lines
        "eol-last": 2,
        // enforces spacing between keys and values in object literal properties
        "key-spacing": 2,
        // specify the maximum depth callbacks can be nested (off by default)
        "max-nested-callbacks": [2, 3],
        // require a capital letter for constructors
        "new-cap" : 2,
        // disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 2,
        // disallow use of the Array constructor
        "no-array-constructor": 2,
        // disallow if as the only statement in an else block (off by default)
        "no-lonely-if": 2,
        // disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 2,
        // disallow nested ternary expressions (off by default)
        "no-nested-ternary": 2,
        // disallow use of the Object constructor
        "no-new-object": 2,
        // disallow space before semicolon
        "no-space-before-semi": 2,
        // disallow space between function identifier and application
        "no-spaced-func": 2,
        // disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 2,
        // disallow multiple empty lines (off by default)
        "no-multiple-empty-lines": 2,
        // disallow dangling underscores in identifiers
        "no-underscore-dangle": 2,
        // disallow wrapping of non-IIFE statements in parens
        "no-wrap-func": 2,
        // enforce padding within blocks (off by default)
        "padded-blocks": [2, "never"],
        // specify whether double or single quotes should be used
        "quotes": [2, "single"],
        // require or disallow use of semicolons instead of ASI
        "semi": 2,
        // require a space after certain keywords (off by default)
        "space-after-keywords": 2,
        // require or disallow space before blocks (off by default)
        "space-before-blocks": [2, "always"],
        // require spaces around operators
        "space-infix-ops": 2,
        // require a space after return, throw, and case
        "space-return-throw-case": 2,
        // require a space around word operators such as typeof (off by default)
        "space-unary-ops": 2,
        // require or disallow a space immediately following the // in a line comment (off by default)
        "spaced-line-comment": 2,

        // require let or const instead of var (no-var)
        "no-var": 1,
        
        // Legacy (compatibility with JSHint and JSLint)
        
        // specify the maximum depth that blocks can be nested (off by default)
        "max-depth": [2, 2],
        // specify the maximum length of a line in your program (off by default)
        "max-len": [2, 120],
        // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-params": [2, 5],
        // disallow use of bitwise operators (off by default)
        "no-bitwise": 2
    }
}